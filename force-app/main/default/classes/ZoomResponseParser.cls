//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//
// The supplied json has fields with names that are not valid in apex
// and so can only be parsed with explicitly generated code, this option
// was auto selected for you.

public class ZoomResponseParser {

	public class Recurrence {
		public Integer type_Z {get;set;} // in json: type
		public Integer repeat_interval {get;set;} 
		public Integer end_times {get;set;} 

		public Recurrence(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'type') {
							type_Z = parser.getIntegerValue();
						} else if (text == 'repeat_interval') {
							repeat_interval = parser.getIntegerValue();
						} else if (text == 'end_times') {
							end_times = parser.getIntegerValue();
						} else {
							System.debug(LoggingLevel.WARN, 'Recurrence consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public String uuid {get;set;} 
	public Long id {get;set;} 
	public String host_id {get;set;} 
	public String topic {get;set;} 
	public Integer type_Z {get;set;} // in json: type
	public String status {get;set;} 
	public String timezone {get;set;} 
	public String agenda {get;set;} 
	public String created_at {get;set;} 
	public String start_url {get;set;} 
	public String join_url {get;set;} 
	public List<Occurrences> occurrences {get;set;} 
	public Settings settings {get;set;} 
	public Recurrence recurrence {get;set;} 

	public ZoomResponseParser(JSONParser parser) {
		while (parser.nextToken() != System.JSONToken.END_OBJECT) {
			if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
				String text = parser.getText();
				if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
					if (text == 'uuid') {
						uuid = parser.getText();
					} else if (text == 'id') {
						id = parser.getLongValue();
					} else if (text == 'host_id') {
						host_id = parser.getText();
					} else if (text == 'topic') {
						topic = parser.getText();
					} else if (text == 'type') {
						type_Z = parser.getIntegerValue();
					} else if (text == 'status') {
						status = parser.getText();
					} else if (text == 'timezone') {
						timezone = parser.getText();
					} else if (text == 'agenda') {
						agenda = parser.getText();
					} else if (text == 'created_at') {
						created_at = parser.getText();
					} else if (text == 'start_url') {
						start_url = parser.getText();
					} else if (text == 'join_url') {
						join_url = parser.getText();
					} else if (text == 'occurrences') {
						occurrences = arrayOfOccurrences(parser);
					} else if (text == 'settings') {
						settings = new Settings(parser);
					} else if (text == 'recurrence') {
						recurrence = new Recurrence(parser);
					} else {
						System.debug(LoggingLevel.WARN, 'JSON2Apex consuming unrecognized property: '+text);
						consumeObject(parser);
					}
				}
			}
		}
	}
	
	public class Occurrences {
		public String occurrence_id {get;set;} 
		public String start_time {get;set;} 
		public Integer duration {get;set;} 
		public String status {get;set;} 

		public Occurrences(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'occurrence_id') {
							occurrence_id = parser.getText();
						} else if (text == 'start_time') {
							start_time = parser.getText();
						} else if (text == 'duration') {
							duration = parser.getIntegerValue();
						} else if (text == 'status') {
							status = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Occurrences consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Settings {
		public Boolean host_video {get;set;} 
		public Boolean participant_video {get;set;} 
		public Boolean cn_meeting {get;set;} 
		public Boolean in_meeting {get;set;} 
		public Boolean join_before_host {get;set;} 
		public Boolean mute_upon_entry {get;set;} 
		public Boolean watermark {get;set;} 
		public Boolean use_pmi {get;set;} 
		public Integer approval_type {get;set;} 
		public String audio {get;set;} 
		public String auto_recording {get;set;} 
		public Boolean enforce_login {get;set;} 
		public String enforce_login_domains {get;set;} 
		public String alternative_hosts {get;set;} 
		public Boolean close_registration {get;set;} 
		public Boolean registrants_confirmation_email {get;set;} 
		public Boolean waiting_room {get;set;} 
		public Boolean registrants_email_notification {get;set;} 
		public Boolean meeting_authentication {get;set;} 

		public Settings(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'host_video') {
							host_video = parser.getBooleanValue();
						} else if (text == 'participant_video') {
							participant_video = parser.getBooleanValue();
						} else if (text == 'cn_meeting') {
							cn_meeting = parser.getBooleanValue();
						} else if (text == 'in_meeting') {
							in_meeting = parser.getBooleanValue();
						} else if (text == 'join_before_host') {
							join_before_host = parser.getBooleanValue();
						} else if (text == 'mute_upon_entry') {
							mute_upon_entry = parser.getBooleanValue();
						} else if (text == 'watermark') {
							watermark = parser.getBooleanValue();
						} else if (text == 'use_pmi') {
							use_pmi = parser.getBooleanValue();
						} else if (text == 'approval_type') {
							approval_type = parser.getIntegerValue();
						} else if (text == 'audio') {
							audio = parser.getText();
						} else if (text == 'auto_recording') {
							auto_recording = parser.getText();
						} else if (text == 'enforce_login') {
							enforce_login = parser.getBooleanValue();
						} else if (text == 'enforce_login_domains') {
							enforce_login_domains = parser.getText();
						} else if (text == 'alternative_hosts') {
							alternative_hosts = parser.getText();
						} else if (text == 'close_registration') {
							close_registration = parser.getBooleanValue();
						} else if (text == 'registrants_confirmation_email') {
							registrants_confirmation_email = parser.getBooleanValue();
						} else if (text == 'waiting_room') {
							waiting_room = parser.getBooleanValue();
						} else if (text == 'registrants_email_notification') {
							registrants_email_notification = parser.getBooleanValue();
						} else if (text == 'meeting_authentication') {
							meeting_authentication = parser.getBooleanValue();
						} else {
							System.debug(LoggingLevel.WARN, 'Settings consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	
	public static ZoomResponseParser parse(String json) {
		System.JSONParser parser = System.JSON.createParser(json);
		return new ZoomResponseParser(parser);
	}
	
	public static void consumeObject(System.JSONParser parser) {
		Integer depth = 0;
		do {
			System.JSONToken curr = parser.getCurrentToken();
			if (curr == System.JSONToken.START_OBJECT || 
				curr == System.JSONToken.START_ARRAY) {
				depth++;
			} else if (curr == System.JSONToken.END_OBJECT ||
				curr == System.JSONToken.END_ARRAY) {
				depth--;
			}
		} while (depth > 0 && parser.nextToken() != null);
	}
	




    private static List<Occurrences> arrayOfOccurrences(System.JSONParser p) {
        List<Occurrences> res = new List<Occurrences>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Occurrences(p));
        }
        return res;
    }






}